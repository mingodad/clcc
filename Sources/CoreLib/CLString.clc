#include <string.h>
#include "CLObject.clc"


class CLString:CLObject
{

	char *cstrPtr;		// pointer to c string
	unsigned long	length;		// character count in string

	// constructor

	void init ( )
	{
	
		CLObject:init( self );
		
		cstrPtr	= NULL;
		length		= 0;

	}	


	// constructor

	void initWithString( CLString* theString )
	{
	
		init( );
		appendString( theString );

	}


	// constructor

	void initWithCString ( char* theString )
	{

		init( );
		appendCString( theString );

	}	
	

	// destructor

	void destruct( )
	{
	
		removeAllCharacters( );
		CLObject:destruct( self );

	}


	// appends character

	void appendCharacter ( char	theCharacter )
	{

		size_t newLength = length + sizeof( char );
		cstrPtr = realloc( cstrPtr, newLength + 1 );
		//check return value ???
		cstrPtr[length] = theCharacter;
		cstrPtr[newLength] = '\0';
		length = newLength;

	}


	// appends string

	void appendString ( CLString* theString )
	{
	
		if ( theString != NULL && theString.length )
		{
		
			size_t newLength = length + theString.length;
			cstrPtr = realloc( cstrPtr, newLength + 1);
			//check return value ???
			memcpy(cstrPtr+length, theString.cstrPtr, theString.length);
			cstrPtr[newLength] = '\0';
			length = newLength;
		}

	}
		

	// create string from c string

	void appendCString( char* theString )
	{
		if (theString) {
			
			size_t theStringLength = strlen(theString);
			appendCStringWithSize(theString, theStringLength);
		}

	}


	// create string from c string with a specified size

	void appendCStringWithSize( char* theString , size_t size)
	{
		if (theString && size) {
			
			size_t newLength = length + size;
			cstrPtr = realloc( cstrPtr, newLength + 1);
			//check return value ???
			memcpy(cstrPtr+length, theString, size);
			cstrPtr[newLength] = '\0';
			length = newLength;
		}

	}


	// removes all characters
	
	void removeAllCharacters( )
	{
	
		// init
		if(cstrPtr) free( cstrPtr );
		cstrPtr = NULL;
		length = 0;
	
	}


	// reads string from file
			
	void readFile( CLString* thePath )
	{

		// init

		char *fileName = thePath.cString( );	// needs release
		FILE* filePointer	= fopen( fileName , "r" );
		
		if ( filePointer != NULL )
		{
			
			readFilePointer(filePointer);
			fclose( filePointer );
			
		}

		free( fileName );
			
	}


	// reads string from file
			
	void readFilePointer( FILE* thePointer )
	{

		// init
		
		long int prev=ftell(thePointer);
		fseek(thePointer, 0L, SEEK_END);
		long int sz=ftell(thePointer);
		fseek(thePointer,prev,SEEK_SET); //go back to where we were
		
		size_t newLength = length + sz;
		cstrPtr = realloc( cstrPtr, newLength + 1);
		//check return value ???
		size_t result = fread(cstrPtr+length, sizeof(char), sz, thePointer );
		//check result ???
		cstrPtr[newLength] = '\0';
		length = newLength;
			
	}

		
	// writes string to file
			
	void writeToFile( CLString* thePath )
	{

		if ( length ) {
			char* fileName;
			FILE* filePointer;
			
			// init

			fileName = thePath.cstrPtr;	// needs release
			filePointer	= fopen( fileName , "w" );
			
			writeToFilePointer(filePointer);

			fclose( filePointer );
		}
		
	}

		
	// writes string to file
			
	void writeToFilePointer( FILE* theFilePointer )
	{

		if ( length ) {
		
			fwrite(cstrPtr, sizeof(char), length, theFilePointer );
		}
		
	}


	// returns last path component

	CLString* stringWithLastPathComponent( )
	{
	
		CLString*       result;
		
		// init

		result:alloc( );
		result:init( );
		
		if (length) {
			
			int i, pos = 0;
			for( i = 0; i < length; ++i)
			{

				if ( cstrPtr[i] == '/' || cstrPtr[i] == '\\' ) 
				{
					pos = i+1;
				}

			}
			result:appendCString(cstrPtr+pos);
		}
		return result;
	
	}


	// returns string without extension

	CLString* stringByRemovingExtension( )
	{
	
		CLString*		result;
		
		// init
		
		result:alloc( );	// needs release
		result:init( );

		if ( length )
		{

			int	i, pos = 0;
			
			for( i = length-1; i >= 0; --i)
			{
				if(cstrPtr[i] == '.')
				{
					pos = i;
					break;
				}
			}

			result:appendCStringWithSize( cstrPtr, pos );

		}
		
		return result;
		
	}


	// returns string without last path component

	CLString* stringByRemovingLastPathComponent ( )
	{
	
		CLString* 	result;
		
		// init

		result:alloc( );	// needs release
		result:init( );

		if ( length )
		{

			int	i, pos = 0;
			
			for( i = length-1; i >= 0; --i)
			{
				if(cstrPtr[i] == '/' || cstrPtr[i] == '\\' )
				{
					pos = i;
					break;
				}
			}

			result:appendCStringWithSize( cstrPtr, pos );

		}

		return result;
	
	}
	
	
	// checks if string is in string
	
	char containsString( CLString* theString )
	{
			
		// init

		return indexOfString( theString ) >= 0;
	
	}


	// retruns index of given string in string

	int indexOfString ( CLString*	theSearchString )
	{
	
		int result = -1;
		
		// init

		if ( length && theSearchString.length)
		{

			char *s = strstr(cstrPtr, theSearchString.cstrPtr);
			if ( s ) {
				result = s - cstrPtr;
			}
		}

		return result;

	}


	// retruns true if cstr starts with a character c

	int startsWith ( char c )
	{
	
		// init

		return ( length && cstrPtr[0] == c);

	}


	// retruns true if cstr ends with a character c

	int endsWith ( char c )
	{
	
		// init

		return ( length && cstrPtr[length-1] == c);

	}


	// returns string equality

	char equals ( CLString* theStringB )
	{

		// init
		int i;
		
		if( length != theStringB.length ) return 0;
		if( !length || !theStringB.length ) return 0;
		
		for ( i = 0; cstrPtr[i] && theStringB.cstrPtr[i]; ++i )
		{

			if ( cstrPtr[i] != theStringB.cstrPtr[i] ) return 0;

		}

		return 1;

	}

	
	// converts string to chars

	char* cString ( )
	{
	
		
		if ( length )
		{

			// init
	
			char* 	result;
			
			result 	= malloc( length + 1 );
			//check result ???
			memcpy(result, cstrPtr, length + 1);

			return result;
			
		} 
		else return NULL;

	}


	// prints string to chars

	void describe ( )
	{
	
		// init

		if ( length ) 
		{

			printf( "%s" , cstrPtr );

		}
		
	}

}